a. 
create table Customer_info(
    C_ID NUMBER NOT NULL,
    NAME VARCHAR2(255),
    DOB DATE,
    ADDRESS VARCHAR2(255),
    CONSTRAINT PK_Customer_info PRIMARY KEY (C_ID)
);

create table PLAN(
    P_ID NUMBER NOT NULL,
    NAME VARCHAR(255),
    CPM NUMBER,
    CONSTRAINT PK_PLAN PRIMARY KEY (P_ID)
);

create table SIM(
    MOBILE_NO NUMBER,
    C_ID NUMBER,
    P_ID NUMBER,
    CONSTRAINT PK_SIM PRIMARY KEY (MOBILE_NO),
    CONSTRAINT FK_SIM1 FOREIGN KEY (C_ID) REFERENCES Customer_info (C_ID) ON DELETE CASCADE,
    CONSTRAINT FK_SIM2 FOREIGN KEY (P_ID) REFERENCES Plan (P_ID) ON DELETE CASCADE
);

create table Call_logs(
    call_id NUMBER,
    call_from number,
    call_begin timestamp,
    call_end timestamp,
    constraint PK_CALL_LOG primary key (call_id),
    constraint FK_CALL_LOG foreign key (call_from) references SIM(MOBILE_NO) ON DELETE CASCADE
);

b.
SET SERVEROUTPUT ON SIZE 1000000
CREATE OR REPLACE FUNCTION CalculateCharge(SIM IN SIM.MOBILE_NO%TYPE, BEGINTIME IN Call_logs.call_begin%TYPE, ENDTIME Call_logs.call_end%TYPE)
RETURN number
AS
TOTAL_CHARGE NUMBER;
PLAN_NO PLAN.P_ID%TYPE;
DURATION CALL_LOGS.call_begin%TYPE;
DURATION_MIN NUMBER;
DURATION_SEC NUMBER;
DURATION_HOUR NUMBER;
BEGIN
SELECT P_ID INTO PLAN_NO FROM SIM WHERE MOBILE_NO=SIM;
SELECT CPM INTO TOTAL_CHARGE FROM PLAN WHERE P_ID=PLAN_NO;
DURATION_MIN:=EXTRACT( MINUTE FROM (ENDTIME-BEGINTIME));
DURATION_SEC:=EXTRACT( SECOND FROM (ENDTIME-BEGINTIME))/60;
DURATION_HOUR:=EXTRACT( HOUR FROM (ENDTIME-BEGINTIME))*60;
RETURN TOTAL_CHARGE;
END;
/

C.
CREATE SEQUENCE SERIAL_NO
MINVALUE 00000001
MAXVALUE 99999999
START WITH 00000001
INCREMENT BY 1
CACHE 10000;

SET SERVEROUTPUT ON SIZE 1000000
CREATE OR REPLACE FUNCTION CALLID(BEGINTIME IN Call_logs.call_begin%TYPE)
RETURN VARCHAR2
AS
YMD VARCHAR2(255);
NNN NUMBER;
DURATION_YEAR NUMBER;
DURATION_MONTH NUMBER;
DURATION_DAY NUMBER;
BEGIN
DURATION_YEAR:=EXTRACT( YEAR FROM (BEGINTIME));
DURATION_MONTH:=EXTRACT( MONTH FROM (BEGINTIME));
DURATION_DAY:=EXTRACT( DAY FROM (BEGINTIME));
YMD:=CONCAT(DURATION_YEAR,DURATION_MONTH);
YMD:=CONCAT(YMD,DURATION_DAY);
SELECT SERIAL_NO.NEXTVAL INTO NNN
FROM DUAL ;
YMD:=CONCAT(YMD,NNN);
RETURN YMD;
END;
/

CREATE OR REPLACE
TRIGGER CALL_ID_GENERATOR
BEFORE INSERT ON Call_logs
FOR EACH ROW
DECLARE
    NEW_ID varchar2(255) ;
BEGIN
NEW_ID:= CALLID(:NEW.call_begin);
:NEW.call_id := NEW_ID ;
END ;
/


3.

SET SERVEROUTPUT ON SIZE 1000000
CREATE OR REPLACE FUNCTION SCHOLARSHIP_DISTRIBUTION(TOTAL_AMOUNT IN NUMBER,PER_STUDENT_AMOUNT IN NUMBER, RECEIVED OUT NUMBER:=0)
RETURN NUMBER
AS
REMAINING NUMBER;
BEGIN
SELECT COUNT(ID) INTO REMAINING FROM STUDENTS WHERE PROGRAM='SOFTWARE ENGINEERING' AND YEAR=2 AND CGPA>=3.5 AND 
ID NOT IN ( SELECT STUDENTID FROM MISCONDUCT);

FOR I IN(SELECT ID FROM STUDENTS WHERE PROGRAM='SOFTWARE ENGINEERING' AND YEAR=2 AND CGPA>=3.5 AND 
ID NOT IN ( SELECT STUDENTID FROM MISCONDUCT)) LOOP
BEGIN
IF(TOTAL_AMOUNT-PER_STUDENT_AMOUNT>0) THEN
    TOTAL_AMOUNT:= TOTAL_AMOUNT-PER_STUDENT_AMOUNT;
    SELECT DATE INTO DT FROM DUAL;
    INSERT INTO STUDENTSTRANSACTIONS VALUES(I.ID,DT,PER_STUDENT_AMOUNT);
    RECEIVED:= RECEIVED+1;
ELSE 
EXIT;
END IF;
END LOOP;
REMAINING:= REMAINING-RECEIVED;
RETURN REMAINING;
END;
/
